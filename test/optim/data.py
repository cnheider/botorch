#! /usr/bin/env python3

import torch
from botorch.optim.batch_lbfgs import LBFGScompact
from botorch.optim.batch_qp_solver import Constraints


def _gen_test_lbfgs_q_data(dtype, device):
    lbfgs = LBFGScompact(
        gamma=torch.tensor([[[0.5000]], [[0.5000]]], dtype=dtype, device=device),
        N=torch.tensor(
            [
                [
                    [-1.5144, 1.1505, -0.4315, -1.5144, 1.1505, -0.4315],
                    [0.4226, 0.4415, -0.3252, 0.4226, 0.4415, -0.3252],
                    [-1.2132, -0.1318, 1.8576, -1.2132, -0.1318, 1.8576],
                    [-0.2740, 1.1108, -1.5959, -0.2740, 1.1108, -1.5959],
                ],
                [
                    [-0.7326, 0.9525, 0.4585, -0.7326, 0.9525, 0.4585],
                    [0.4239, -1.1489, 0.5468, 0.4239, -1.1489, 0.5468],
                    [1.1489, -1.2656, 0.0279, 1.1489, -1.2656, 0.0279],
                    [1.1408, -1.2481, -0.1150, 1.1408, -1.2481, -0.1150],
                ],
            ],
            dtype=dtype,
            device=device,
        ),
        M_LU=torch.tensor(
            [
                [
                    [2.0094, -0.8501, -0.6502, 0.0000, -0.0000, -0.0000],
                    [-0.3236, -1.6038, 2.9343, -0.6502, -1.3288, 0.0000],
                    [0.0000, 0.5300, -2.2055, -1.6648, 0.7043, 0.0000],
                    [-0.4230, -0.6393, -0.1234, -1.4711, -0.7626, 0.0000],
                    [-0.0000, -0.0000, 0.6025, -0.6818, -2.3292, 0.0000],
                    [-0.0000, 0.0000, -0.0000, -0.0000, -0.0000, -3.1447],
                ],
                [
                    [-2.0313, 2.6933, -0.0417, -2.0313, 0.0000, -0.0000],
                    [-0.0000, -2.0313, -0.1016, -1.6689, 0.0000, 0.0000],
                    [0.0500, 0.0868, 0.2725, 0.1449, -0.0417, 0.0000],
                    [-0.8216, -0.0893, -0.5317, -1.7409, -0.0222, 0.0000],
                    [0.0000, -0.0000, -0.1529, -0.0127, -2.7000, 0.0000],
                    [0.0000, 0.0000, 0.0000, -0.0000, -0.0000, -0.2616],
                ],
            ],
            dtype=dtype,
            device=device,
        ),
        M_LU_pivots=torch.tensor(
            [[1, 3, 4, 4, 5, 6], [2, 4, 3, 4, 5, 6]], dtype=torch.int32, device=device
        ),
        F=torch.tensor(
            [
                [
                    [-0.7572, 0.5752, -0.2157, -0.7572, 0.5752, -0.2157],
                    [0.2113, 0.2208, -0.1626, 0.2113, 0.2208, -0.1626],
                    [-0.6066, -0.0659, 0.9288, -0.6066, -0.0659, 0.9288],
                    [-0.1370, 0.5554, -0.7979, -0.1370, 0.5554, -0.7979],
                ],
                [
                    [-0.3663, 0.4762, 0.2292, -0.3663, 0.4762, 0.2292],
                    [0.2120, -0.5745, 0.2734, 0.2120, -0.5745, 0.2734],
                    [0.5744, -0.6328, 0.0140, 0.5744, -0.6328, 0.0140],
                    [0.5704, -0.6240, -0.0575, 0.5704, -0.6240, -0.0575],
                ],
            ],
            dtype=dtype,
            device=device,
        ),
        E=torch.tensor(
            [
                [
                    [0.9953, 0.3054, 0.2320, -0.4977, -0.0000, -0.0000],
                    [0.3054, 1.4441, 0.3051, -0.3054, -0.7220, -0.0000],
                    [0.2320, 0.3051, 0.6360, -0.2320, -0.3051, -0.3180],
                    [-0.4977, -0.3054, -0.2320, 0.0000, 0.0000, 0.0000],
                    [-0.0000, -0.7220, -0.3051, 0.0000, 0.0000, 0.0000],
                    [-0.0000, -0.0000, -0.3180, 0.0000, 0.0000, 0.0000],
                ],
                [
                    [1.1984, 0.4519, 0.3047, -0.5992, -0.0000, -0.0000],
                    [0.4519, 0.7426, 0.0591, -0.4519, -0.3713, -0.0000],
                    [0.3047, 0.0591, 7.6448, -0.3047, -0.0591, -3.8224],
                    [-0.5992, -0.4519, -0.3047, 0.0000, 0.0000, 0.0000],
                    [-0.0000, -0.3713, -0.0591, 0.0000, 0.0000, 0.0000],
                    [-0.0000, -0.0000, -3.8224, 0.0000, 0.0000, 0.0000],
                ],
            ],
            dtype=dtype,
            device=device,
        ),
        FE=torch.tensor(
            [
                [
                    [-0.2511, 0.3495, -0.0686, 0.2511, -0.3495, 0.0686],
                    [0.1349, 0.1098, -0.0517, -0.1349, -0.1098, 0.0517],
                    [-0.1066, 0.2358, 0.2954, 0.1066, -0.2358, -0.2954],
                    [-0.0836, 0.1576, -0.2537, 0.0836, -0.1576, 0.2537],
                ],
                [
                    [0.0656, 0.1904, 0.8763, -0.0656, -0.1904, -0.8763],
                    [-0.0493, -0.1971, 1.0451, 0.0493, 0.1971, -1.0451],
                    [0.0625, -0.2341, 0.0534, -0.0625, 0.2341, -0.0534],
                    [0.0422, -0.2351, -0.2198, -0.0422, 0.2351, 0.2198],
                ],
            ],
            dtype=dtype,
            device=device,
        ),
    )

    q = torch.tensor(
        [
            [[0.8510], [1.3032], [1.9967], [0.3181]],
            [[1.4922], [1.0257], [0.2975], [0.0498]],
        ],
        dtype=dtype,
        device=device,
    )

    return lbfgs, q


def _gen_test_ineq_con_data(dtype, device):
    G = torch.tensor(
        [
            [
                [0.0, 0.0, 0.0, 1.0],
                [0.0, 0.0, 1.0, 0.0],
                [0.0, 1.0, 0.0, 0.0],
                [1.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, -1.0],
                [0.0, 0.0, -1.0, 0.0],
                [0.0, -1.0, 0.0, 0.0],
                [-1.0, 0.0, 0.0, 0.0],
            ],
            [
                [0.0, 0.0, 0.0, 1.0],
                [0.0, 0.0, 1.0, 0.0],
                [0.0, 1.0, 0.0, 0.0],
                [1.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, -1.0],
                [0.0, 0.0, -1.0, 0.0],
                [0.0, -1.0, 0.0, 0.0],
                [-1.0, 0.0, 0.0, 0.0],
            ],
        ],
        dtype=dtype,
        device=device,
    )
    h = torch.tensor(
        [
            [[1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0]],
            [[1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0]],
        ],
        dtype=dtype,
        device=device,
    )
    return G, h


def _gen_test_eq_con_data(dtype, device):
    A = torch.tensor(
        [
            [[1.0, -1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0]],
            [[0.0, 1.0, 1.0, 0.0], [1.0, 0.0, 1.0, -1.0]],
        ],
        dtype=dtype,
        device=device,
    )
    b = torch.tensor([[[0.0], [1.0]], [[1.0], [0.0]]], dtype=dtype, device=device)
    return A, b


def gen_test_data(dtype, device, ineq, eq):
    lbfgs, q = _gen_test_lbfgs_q_data(dtype=dtype, device=device)
    if ineq:
        G, h = _gen_test_ineq_con_data(dtype=dtype, device=device)
    else:
        G = torch.zeros(2, 0, 4, dtype=dtype, device=device)
        h = torch.zeros(2, 0, 1, dtype=dtype, device=device)
    if eq:
        A, b = _gen_test_eq_con_data(dtype=dtype, device=device)
    else:
        A = torch.zeros(2, 0, 4, dtype=dtype, device=device)
        b = torch.zeros(2, 0, 1, dtype=dtype, device=device)

    constraints = Constraints(G=G, h=h, A=A, b=b)

    if ineq and not eq:
        xopt = torch.tensor(
            [
                [[-0.4255], [-0.6516], [-0.9984], [-0.1591]],
                [[-0.7461], [-0.5128], [-0.1488], [-0.0249]],
            ],
            dtype=dtype,
            device=device,
        )
    elif ineq and eq:
        xopt = torch.tensor(
            [
                [[-0.5386], [-0.5386], [0.0803], [0.9197]],
                [[-0.7304], [0.3101], [0.6899], [-0.0406]],
            ],
            dtype=dtype,
            device=device,
        )
    elif not ineq and not eq:
        # analytical solution
        xopt = -(lbfgs.gamma * q + lbfgs.FE.bmm(lbfgs.F.transpose(1, 2).bmm(q)))

    return lbfgs, constraints, q, xopt
